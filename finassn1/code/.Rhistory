library(rmsfuns)
if (!require(robustbase)) install.packages("MTS","robustbase")
pacman::p_load("MTS", "robustbase")
if (!require("rmsfuns")) install.packages("rmsfuns")
library(rmsfuns)
library(tidyverse)
pacman::p_load(tbl2xts)
load_pkg("pacman")
library(rmsfuns)
library(rmsfuns)
pacman::p_load("MTS", "robustbase")
pacman::p_load("tidyverse", "devtools", "rugarch","rmgarch", "forecast", "tbl2xts", "lubridate", "PerformanceAnalytics", "ggthemes")
data<- read_csv("C:/Users/User/Documents/finassn1/data/msci_cleaned.csv")
rtn <- data %>% gather(Tickers, TRI, -Date) %>% group_by(Tickers) %>%
mutate(dlogret = log(TRI) - log(lag(TRI))) %>% mutate(scaledret = (dlogret -
mean(dlogret, na.rm = T))) %>% filter(Date > first(Date)) %>%
ungroup()
Tidyrtn <- rtn
ggplot(Tidyrtn) + geom_line(aes(x = Date, y = TRI, colour = Tickers,
alpha = 0.5)) + ggtitle("MSCI Returns Series:  EM DM Returns") +
facet_wrap(~Tickers, scales = "free_y") + guides(alpha = FALSE) +
theme_bw() + scale_color_hue(l = 20) + scale_x_date(labels = scales::date_format("'%y"),
date_breaks = "2 years") + theme(axis.text = element_text(size = 7))
## MV contitional Heteroskedasticity test
xts_rtn <- rtn %>% tbl_xts(., cols_to_xts = "dlogret", spread_by = "Tickers")
MarchTest(xts_rtn)
#Firstly for the individual series, a standard univariate GARCH(1,1) modelled to give the H_t (used interchangeably with Sigma for plotting) process to be used in calculating the standardized residual. This are then used in  DCC calculations after.
#dccPre fits the univariate GARCH models to each series of returns
DCCPre <- dccPre(xts_rtn, include.mean = T, p = 0)
names(DCCPre)
Vol_series <- DCCPre$marVol
colnames(Vol) <- colnames(xts_rtn)
colnames(Vol_series) <- colnames(xts_rtn)
Vol_series <-
data.frame( cbind( date = index(xts_rtn), Vol_series)) %>% # Add date column which dropped away...
mutate(date = as.Date(date)) %>%  tbl_df()  # make date column a date column...
library(dplyr)
Vol_series <-
data.frame( cbind( date = index(xts_rtn), Vol_series)) %>% # Add date column which dropped away...
mutate(date = as.Date(date)) %>%  tbl_df()  # make date column a date column...
TidyVol <- Vol_series %>% gather(Tickers, Sigma, -date)
ggplot(TidyVol) + geom_line(aes(x = date, y = Sigma, colour = Tickers))
View(Vol_series)
View(TidyVol)
data<- read_csv("C:/Users/User/Documents/finassn1/data/msci_cleaned.csv")
rtn <- data %>% gather(Tickers, TRI, -Date) %>% group_by(Tickers) %>%
mutate(dlogret = log(TRI) - log(lag(TRI))) %>% mutate(scaledret = (dlogret -
mean(dlogret, na.rm = T))) %>% filter(Date > first(Date)) %>%
ungroup()
Tidyrtn <- rtn
ggplot(Tidyrtn) + geom_line(aes(x = Date, y = TRI, colour = Tickers,
alpha = 0.5)) + ggtitle("MSCI Returns Series:  EM DM Returns") +
facet_wrap(~Tickers, scales = "free_y") + guides(alpha = FALSE) +
theme_bw() + scale_color_hue(l = 20) + scale_x_date(labels = scales::date_format("'%y"),
date_breaks = "2 years") + theme(axis.text = element_text(size = 7))
## MV contitional Heteroskedasticity test
xts_rtn <- rtn %>% tbl_xts(., cols_to_xts = "dlogret", spread_by = "Tickers")
MarchTest(xts_rtn)
#Firstly for the individual series, a standard univariate GARCH(1,1) modelled to give the H_t (used interchangeably with Sigma for plotting) process to be used in calculating the standardized residual. This are then used in  DCC calculations after.
#dccPre fits the univariate GARCH models to each series of returns
DCCPre <- dccPre(xts_rtn, include.mean = T, p = 0)
Vol_series <- DCCPre$marVol
colnames(Vol_series) <- colnames(xts_rtn)
Vol_series <-
data.frame( cbind( date = index(xts_rtn), Vol_series)) %>% # Add date column which dropped away...
mutate(date = as.Date(date)) %>%  tbl_df()  # make date column a date column...
View(Vol_series)
TidyVol <- Vol_series %>% gather(Tickers, Sigma, -date)
View(TidyVol)
ggplot(TidyVol) + geom_line(aes(x = date, y = Sigma, colour = Tickers))
### Estimating DCC model
# Firstly save the standardized residuals (Etas) from the Vol series
StdRes <- DCCPre$sresi
#detach tidyr and dplyr packages to avoid ambiguity between stats::filter and dplyr::filter
detach("package:tidyverse", unload=TRUE)
detach("package:tbl2xts", unload=TRUE)
#run the dccFit to calculate DCC using the starndadised residuals
DCC <- dccFit(StdRes, type="Engle")
#reload packages
pacman::p_load("tidyverse", "tbl2xts", "broom")
#reload packages
pacman::p_load("tidyverse", "tbl2xts", "broom")
#plot all the bivariate time-varying correlations with BBDXY
Rhot <- DCC$rho.t
#Loop to clean plot by create a renaming function(katzke 2020)
ReturnSeries = xts_rtn
DCC.TV.Cor = Rhot
#To clean the plot
renamingdcc <- function(ReturnSeries, DCC.TV.Cor) {
ncolrtn <- ncol(ReturnSeries)
namesrtn <- colnames(ReturnSeries)
paste(namesrtn, collapse = "_")
}
nam <- c()
xx <- mapply(rep, times = ncolrtn:1, x = namesrtn)
ncolrtn <- ncol(ReturnSeries)
xx <- mapply(rep, times = ncolrtn:1, x = namesrtn)
#To clean the plot
renamingdcc <- function(ReturnSeries, DCC.TV.Cor) {
ncolrtn <- ncol(ReturnSeries)
namesrtn <- colnames(ReturnSeries)
paste(namesrtn, collapse = "_")
}
xx <- mapply(rep, times = ncolrtn:1, x = namesrtn)
namesrtn <- colnames(ReturnSeries)
paste(namesrtn, collapse = "_")
xx <- mapply(rep, times = ncolrtn:1, x = namesrtn)
nam <- c()
for (j in 1:(ncolrtn)) {
for (i in 1:(ncolrtn)) {
nam[(i + (j-1)*(ncolrtn))] <- paste(xx[[j]][1], xx[[i]][1], sep="_")
}
}
colnames(DCC.TV.Cor) <- nam
#Now plot all the time-varying correlations wrt BBDXY using loop
DCC.TV.Cor <-
data.frame( cbind( date = index(ReturnSeries), DCC.TV.Cor)) %>% # Add date column which dropped away...
mutate(date = as.Date(date)) %>%  tbl_df()
DCC.TV.Cor <- DCC.TV.Cor %>% gather(Pairs, Rho, -date)
DCC.TV.Cor
View(DCC.TV.Cor)
library(rmsfuns)
pacman::p_load("MTS", "robustbase")
pacman::p_load("tidyverse", "devtools", "rugarch","rmgarch", "forecast", "tbl2xts", "lubridate", "PerformanceAnalytics", "ggthemes")
choose.files()
data<- read_csv("C:/Users/User/Documents/finassn1/data/msci_cleaned.csv")
rtn <- data %>% gather(Tickers, TRI, -Date) %>% group_by(Tickers) %>%
mutate(dlogret = log(TRI) - log(lag(TRI))) %>% mutate(scaledret = (dlogret -
mean(dlogret, na.rm = T))) %>% filter(Date > first(Date)) %>%
ungroup()
Tidyrtn <- rtn
ggplot(Tidyrtn) + geom_line(aes(x = Date, y = TRI, colour = Tickers,
alpha = 0.5)) + ggtitle("MSCI Returns Series:  EM DM Returns") +
facet_wrap(~Tickers, scales = "free_y") + guides(alpha = FALSE) +
theme_bw() + scale_color_hue(l = 20) + scale_x_date(labels = scales::date_format("'%y"),
date_breaks = "2 years") + theme(axis.text = element_text(size = 7))
## MV contitional Heteroskedasticity test
xts_rtn <- rtn %>% tbl_xts(., cols_to_xts = "dlogret", spread_by = "Tickers")
MarchTest(xts_rtn)
DCCPre <- dccPre(xts_rtn, include.mean = T, p = 0)
names(DCCPre)
Vol_series <- DCCPre$marVol
colnames(Vol_series) <- colnames(xts_rtn)
library(dplyr)
Vol_series <-
data.frame( cbind( date = index(xts_rtn), Vol_series)) %>% # Add date column which dropped away...
mutate(date = as.Date(date)) %>%  tbl_df()  # make date column a date column...
TidyVol <- Vol_series %>% gather(Tickers, Sigma, -date)
ggplot(TidyVol) + geom_line(aes(x = date, y = Sigma, colour = Tickers))
StdRes <- DCCPre$sresi
#detach tidyr and dplyr packages to avoid ambiguity between stats::filter and dplyr::filter
detach("package:tidyverse", unload=TRUE)
detach("package:tbl2xts", unload=TRUE)
View(DCCPre)
Vol_series <- DCCPre$marVol
View(Vol_series)
colnames(Vol_series) <- colnames(xts_rtn)
View(Vol_series)
Vol_series <-
data.frame( cbind( date = index(xts_rtn), Vol_series)) %>% # Add date column which dropped away...
mutate(date = as.Date(date)) %>%  tbl_df()  #
View(Vol_series)
TidyVol <- Vol_series %>% gather(Tickers, Sigma, -date)
View(TidyVol)
ggplot(TidyVol) + geom_line(aes(x = date, y = Sigma, colour = Tickers))
StdRes <- DCCPre$sresi
View(StdRes)
#detach tidyr and dplyr packages to avoid ambiguity between stats::filter and dplyr::filter
detach("package:tidyverse", unload=TRUE)
detach("package:tbl2xts", unload=TRUE)
#run the dccFit to calculate DCC using the starndadised residuals
DCC <- dccFit(StdRes, type="Engle")
#reload packages
pacman::p_load("tidyverse", "tbl2xts", "broom")
#plot all the bivariate time-varying correlations with BBDXY
Rhot <- DCC$rho.t
View(Rhot)
ReturnSeries = xts_rtn
View(ReturnSeries)
DCC.TV.Cor = Rhot
View(DCC.TV.Cor)
#To clean the plot
renamingdcc <- function(ReturnSeries, DCC.TV.Cor) {
ncolrtn <- ncol(ReturnSeries)
namesrtn <- colnames(ReturnSeries)
paste(namesrtn, collapse = "_")
nam <- c()
xx <- mapply(rep, times = ncolrtn:1, x = namesrtn)
# Now let's be creative in designing a nested for loop to save the names corresponding to the columns of interest..
# TIP: draw what you want to achieve on a paper first. Then apply code.
# See if you can do this on your own first.. Then check vs my solution:
nam <- c()
for (j in 1:(ncolrtn)) {
for (i in 1:(ncolrtn)) {
nam[(i + (j-1)*(ncolrtn))] <- paste(xx[[j]][1], xx[[i]][1], sep="_")
}
}
colnames(DCC.TV.Cor) <- nam
# So to plot all the time-varying correlations wrt SBK:
# First append the date column that has (again) been removed...
DCC.TV.Cor <-
data.frame( cbind( date = index(ReturnSeries), DCC.TV.Cor)) %>% # Add date column which dropped away...
mutate(date = as.Date(date)) %>%  tbl_df()
DCC.TV.Cor <- DCC.TV.Cor %>% gather(Pairs, Rho, -date)
DCC.TV.Cor
}
# Let's see if our function works! Excitement!
Rhot <-
renamingdcc(ReturnSeries = xts_rtn, DCC.TV.Cor = Rhot)
head(Rhot %>% arrange(date))
## create a plot for all the stocks relative to the other stocks
g1 <-
ggplot(Rhot %>% filter(grepl("MXBR_", Pairs ), !grepl("_MXBR", Pairs)) ) +
geom_line(aes(x = date, y = Rho, colour = Pairs)) +
theme_hc() +
ggtitle("Dynamic Conditional Correlations: BBDXY")
print(g1)
g2 <-
g1 %+% subset(Rhot %>% filter(grepl("BBDXY_", Pairs ), !grepl("_BBDXY", Pairs))) + ggtitle("Dynamic Conditional Correlations: CPI")
print(g2)
View(xts_rtn)
View(data)
View(rtn)
View(Tidyrtn)
View(Vol_series)
des_names <- c(" ", "Bloomberg US Dollar Spot Index", "Brazil", "Canada", "Switzerland", "Egupyt", "United Kingdom", "India", "Japan", "South Africa", "Taiwan")
View(xts_rtn)
des_t <- cbind(colnames(xts_rtn), des_names)
des_t <- des_t <- des_t[-c(1),]
colnames(des_t) <- c("Ticker", "Description")
table <- xtable(des_t, caption = "Returns description Table \\label{tab1}")
library(xtable)
table <- xtable(des_t, caption = "Returns description Table \\label{tab1}")
print.xtable(table,
# tabular.environment = "longtable",
floating = TRUE,
table.placement = 'H',
# scalebox = 0.4,
comment = FALSE,
caption.placement = 'bottom'
)
View(table)
View(Vol_series)
View(des_t)
View(des_t)
des_t1 <- cbind(colnames(xts_rtn), des_names)
colnames(des_t1) <- c("Ticker", "Description")
table1 <- xtable(des_t1, caption = "Returns description Table \\label{tab1}")
View(table1)
View(table)
des_t2 <- cbind(colnames(xts_rtn), des_names)
colnames(des_t2) <- c("Ticker", "Description")
table1 <- xtable(des_t2, caption = "Returns description Table \\label{tab1}")
print.xtable(table2,
# tabular.environment = "longtable",
floating = TRUE,
table.placement = 'H',
# scalebox = 0.4,
comment = FALSE,
caption.placement = 'bottom'
)
table2 <- xtable(des_t2, caption = "Returns description Table \\label{tab1}")
print.xtable(table2,
# tabular.environment = "longtable",
floating = TRUE,
table.placement = 'H',
# scalebox = 0.4,
comment = FALSE,
caption.placement = 'bottom'
)
View(table2)
View(des_t2)
des_names3 <- c(" ","Brazil", "Canada", "Switzerland", "France", "United Kingdom", "India", "Japan", "South Africa", "Taiwan","Egypt", "Bloomberg US Dollar Spot Index", )
des_t3 <- cbind(colnames(xts_rtn), des_names3)
des_names3 <- c(" ","Brazil", "Canada", "Switzerland", "France", "United Kingdom", "India", "Japan", "South Africa", "Taiwan","Egypt", "Bloomberg US Dollar Spot Index")
des_t3 <- cbind(colnames(xts_rtn), des_names3)
View(des_t3)
des_names4 <- c("Brazil", "Canada", "Switzerland", "France", "United Kingdom", "India", "Japan", "South Africa", "Taiwan","Egypt", "Bloomberg US Dollar Spot Index")
des_t4 <- cbind(colnames(xts_rtn), des_names4)
View(des_t4)
colnames(des_t4) <- c("Ticker", "Description")
table4 <- xtable(des_t4, caption = "Returns description Table \\label{tab1}")
print.xtable(table4,
# tabular.environment = "longtable",
floating = TRUE,
table.placement = 'H',
# scalebox = 0.4,
comment = FALSE,
caption.placement = 'bottom'
)
View(table4)

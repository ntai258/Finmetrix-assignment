devtools::install_github("Nicktz/fmxdat")
library(rtools)
rtools
library(rmsfuns)
library(tools, lib.loc = "C:/Program Files/R/R-4.0.2/library")
install.rtools
if (!require(installr)) {
install.packages("installr")
require(installr)
}
install.packages("rtools")
choose.files()
ExampleData <- read_rds( "C:\\Users\\User\\Documents\\finassn1\\data\\Example_data.rds")
library(dplyr)
ExampleData <- read_rds( "C:\\Users\\User\\Documents\\finassn1\\data\\Example_data.rds")
library(tidyverse)
ExampleData <- read_rds( "C:\\Users\\User\\Documents\\finassn1\\data\\Example_data.rds")
View(ExampleData)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, fig.width = 6, fig.height = 5, fig.pos="H", fig.pos = 'H')
# Note: Include = FALSE implies the code is executed, but not printed in your pdf.
# warning and message = FALSE implies ugly messages and warnings are removed from your pdf. These should be picked up when you execute the command chunks (code sections below) in your rmd, not printed in your paper!
source("code/TRI_Calculation.R")
source(paste0(getwd(), "code/MV Het test.R"))
source( "code/MV Het test.R")
source("code/MV Het test.R")
source("code/MV Het test.R")
source("code/MV Het test.R")
## Normality test
jarque.bera.test(rtn)
pacman::p_load("jarque.bera.test")
pacman::p_load("tseries")
## Normality test
jarque.bera.test(rtn)
xts_rtn <- rtn %>% tbl_xts(., cols_to_xts = "dlogret", spread_by = "Tickers")
## Normality test
jarque.bera.test(xts_rtn)
MarchTest(xts_rtn)
source("code/MV Het test.R")
source("code/Uni_Vol modelling.R")
install.packages("loadpackages")
data<- read_csv("C:/Users/User/Documents/finassn1/data/msci_cleaned.csv")
data <- read_csv("data/msci_cleaned.csv")
View(data)
source("code/TRI_Calculation.R")
source("code/MV Het test.R")
source("code/Uni_Vol modelling.R")
ggplot(TidyVol) + geom_line(aes(x = date, y = Sigma, colour = Tickers))
library(rmsfuns)
pacman::p_load("MTS", "robustbase")
pacman::p_load("tidyverse", "devtools", "rugarch","rmgarch", "forecast", "tbl2xts", "lubridate", "PerformanceAnalytics", "Texevier", "ggthemes")
data<- read_rds("C:/Users/User/Documents/finassn1/data/msci_cleaned.rds")
View(data)
View(data)
Finassn1.loc.root <- file.path("C:/Users/User/Documents/finassn1")
Finassn1.loc.root <- file.path("C:/Users/User/Documents/finassn1")
Finassn1.loc.subdirs <- c("data", "code", "bin")
# Note: using file.path you don't have to remember pasting
# the /...
Finassn <- build_path(glue::glue("{Finassn1.loc.root}/{Finassn1.loc.subdirs}"))
library(rmsfuns)
load_pkg("readr")
df<- read_csv("C:/Users/User/Documents/msci_cleaned.csv")
# Save it to your data directory:
## let's use grepl to identify the pattern you are interested
## in:
DataLoc <- Finassn[grepl("data", Finassn)]
write_rds(data, path = file.path(DataLoc, "msci_cleaned.rds"))
rm(data)
data <- read_rds(file.path(DataLoc, "msci_cleaned.rds"))
View(data)
function (..., list = character(), package = NULL, lib.loc = NULL,
verbose = getOption("verbose"), envir = .GlobalEnv, overwrite = TRUE)
{
fileExt <- function(x) {
db <- grepl("\\.[^.]+\\.(gz|bz2|xz)$", x)
ans <- sub(".*\\.", "", x)
ans[db] <- sub(".*\\.([^.]+\\.)(gz|bz2|xz)$", "\\1\\2",
x[db])
ans
}
my_read_table <- function(...) {
lcc <- Sys.getlocale("LC_COLLATE")
on.exit(Sys.setlocale("LC_COLLATE", lcc))
Sys.setlocale("LC_COLLATE", "C")
read.table(...)
}
names <- c(as.character(substitute(list(...))[-1L]), list)
if (!is.null(package)) {
if (!is.character(package))
stop("'package' must be a character string or NULL")
if (FALSE) {
if (any(package %in% "base"))
warning("datasets have been moved from package 'base' to package 'datasets'")
if (any(package %in% "stats"))
warning("datasets have been moved from package 'stats' to package 'datasets'")
package[package %in% c("base", "stats")] <- "datasets"
}
}
paths <- find.package(package, lib.loc, verbose = verbose)
if (is.null(lib.loc))
paths <- c(path.package(package, TRUE), if (!length(package)) getwd(),
paths)
paths <- unique(normalizePath(paths[file.exists(paths)]))
paths <- paths[dir.exists(file.path(paths, "data"))]
dataExts <- tools:::.make_file_exts("data")
if (length(names) == 0L) {
db <- matrix(character(), nrow = 0L, ncol = 4L)
for (path in paths) {
entries <- NULL
packageName <- if (file_test("-f", file.path(path,
"DESCRIPTION")))
basename(path)
else "."
if (file_test("-f", INDEX <- file.path(path, "Meta",
"data.rds"))) {
entries <- readRDS(INDEX)
}
else {
dataDir <- file.path(path, "data")
entries <- tools::list_files_with_type(dataDir,
"data")
if (length(entries)) {
entries <- unique(tools::file_path_sans_ext(basename(entries)))
entries <- cbind(entries, "")
}
}
if (NROW(entries)) {
if (is.matrix(entries) && ncol(entries) == 2L)
db <- rbind(db, cbind(packageName, dirname(path),
entries))
else warning(gettextf("data index for package %s is invalid and will be ignored",
sQuote(packageName)), domain = NA, call. = FALSE)
}
}
colnames(db) <- c("Package", "LibPath", "Item", "Title")
footer <- if (missing(package))
paste0("Use ", sQuote(paste("data(package =", ".packages(all.available = TRUE))")),
"\n", "to list the data sets in all *available* packages.")
else NULL
y <- list(title = "Data sets", header = NULL, results = db,
footer = footer)
class(y) <- "packageIQR"
return(y)
}
paths <- file.path(paths, "data")
for (name in names) {
found <- FALSE
for (p in paths) {
tmp_env <- if (overwrite)
envir
else new.env()
if (file_test("-f", file.path(p, "Rdata.rds"))) {
rds <- readRDS(file.path(p, "Rdata.rds"))
if (name %in% names(rds)) {
found <- TRUE
if (verbose)
message(sprintf("name=%s:\t found in Rdata.rds",
name), domain = NA)
thispkg <- sub(".*/([^/]*)/data$", "\\1",
p)
thispkg <- sub("_.*$", "", thispkg)
thispkg <- paste0("package:", thispkg)
objs <- rds[[name]]
lazyLoad(file.path(p, "Rdata"), envir = tmp_env,
filter = function(x) x %in% objs)
break
}
else if (verbose)
message(sprintf("name=%s:\t NOT found in names() of Rdata.rds, i.e.,\n\t%s\n",
name, paste(names(rds), collapse = ",")),
domain = NA)
}
if (file_test("-f", file.path(p, "Rdata.zip"))) {
warning("zipped data found for package ", sQuote(basename(dirname(p))),
".\nThat is defunct, so please re-install the package.",
domain = NA)
if (file_test("-f", fp <- file.path(p, "filelist")))
files <- file.path(p, scan(fp, what = "",
quiet = TRUE))
else {
warning(gettextf("file 'filelist' is missing for directory %s",
sQuote(p)), domain = NA)
next
}
}
else {
files <- list.files(p, full.names = TRUE)
}
files <- files[grep(name, files, fixed = TRUE)]
if (length(files) > 1L) {
o <- match(fileExt(files), dataExts, nomatch = 100L)
paths0 <- dirname(files)
paths0 <- factor(paths0, levels = unique(paths0))
files <- files[order(paths0, o)]
}
if (length(files)) {
for (file in files) {
if (verbose)
message("name=", name, ":\t file= ...",
.Platform$file.sep, basename(file), "::\t",
appendLF = FALSE, domain = NA)
ext <- fileExt(file)
if (basename(file) != paste0(name, ".", ext))
found <- FALSE
else {
found <- TRUE
zfile <- file
zipname <- file.path(dirname(file), "Rdata.zip")
if (file.exists(zipname)) {
Rdatadir <- tempfile("Rdata")
dir.create(Rdatadir, showWarnings = FALSE)
topic <- basename(file)
rc <- .External(C_unzip, zipname, topic,
Rdatadir, FALSE, TRUE, FALSE, FALSE)
if (rc == 0L)
zfile <- file.path(Rdatadir, topic)
}
if (zfile != file)
on.exit(unlink(zfile))
switch(ext, R = , r = {
library("utils")
sys.source(zfile, chdir = TRUE, envir = tmp_env)
}, RData = , rdata = , rda = load(zfile,
envir = tmp_env), TXT = , txt = , tab = ,
tab.gz = , tab.bz2 = , tab.xz = , txt.gz = ,
txt.bz2 = , txt.xz = assign(name, my_read_table(zfile,
header = TRUE, as.is = FALSE), envir = tmp_env),
CSV = , csv = , csv.gz = , csv.bz2 = ,
csv.xz = assign(name, my_read_table(zfile,
header = TRUE, sep = ";", as.is = FALSE),
envir = tmp_env), found <- FALSE)
}
if (found)
break
}
if (verbose)
message(if (!found)
"*NOT* ", "found", domain = NA)
}
if (found)
break
}
if (!found) {
warning(gettextf("data set %s not found", sQuote(name)),
domain = NA)
}
else if (!overwrite) {
for (o in ls(envir = tmp_env, all.names = TRUE)) {
if (exists(o, envir = envir, inherits = FALSE))
warning(gettextf("an object named %s already exists and will not be overwritten",
sQuote(o)))
else assign(o, get(o, envir = tmp_env, inherits = FALSE),
envir = envir)
}
rm(tmp_env)
}
}
invisible(names)
}
View(df)
save(df, file = "msci_clean.rds")
load("msci_clean.rds")
data <- read_rds(file.path(DataLoc, "msci_clean.rds"))
df<- read_rds("C:/Users/User/Documents/Finassn1/data/msci_cleaned.rds")
df<- read_rds("C:/Users/User/Documents/Finassn1/data/msci_clean.rds")
df<- read_rds("C:/Users/User/Documents/Finassn1/data/Example_data.rds")
df1<- read_rds("C:/Users/User/Documents/Finassn1/data/msci_cleaned.rds")
df1<- read_rds("C:/Users/User/Documents/Finassn1/data/msci_clean.rds")
library(rmsfuns)
pacman::p_load("MTS", "robustbase")
pacman::p_load("tidyverse", "devtools", "rugarch","rmgarch", "forecast", "tbl2xts", "lubridate", "PerformanceAnalytics", "Texevier", "ggthemes")
data<- read_rds("C:/Users/User/Documents/finassn1/data/msci_clean.rds")
rtn <- data %>% gather(Tickers, TRI, -Date) %>% group_by(Tickers) %>%
mutate(dlogret = log(TRI) - log(lag(TRI))) %>% mutate(scaledret = (dlogret -
mean(dlogret, na.rm = T))) %>% filter(Date > first(Date)) %>%
ungroup()
Tidyrtn <- rtn
g <-
ggplot(Tidyrtn) + geom_line(aes(x = Date, y = TRI, colour = Tickers,
alpha = 0.5)) + ggtitle("MSCI Returns Series:  EM  & DM Returns") +
facet_wrap(~Tickers, scales = "free_y") + guides(alpha = FALSE) +
theme_bw() + scale_color_hue(l = 20) + scale_x_date(labels = scales::date_format("'%y"),
date_breaks = "2 years") + theme(axis.text = element_text(size = 7))
print(g)
library(rmsfuns)
pacman::p_load("MTS", "robustbase")
pacman::p_load("tidyverse", "devtools", "rugarch","rmgarch", "forecast", "tbl2xts", "lubridate", "PerformanceAnalytics", "Texevier", "ggthemes")
library(Texevier)
if (!require("devtools")) install.packages("devtools")
library(devtools)
library(Texevier)
devtools::install_github("Nicktz/Texevier")
library(Texevier)
pacman:p_load("xfun")
install.packages(xfun)
library(rmsfuns)
pacman::p_load("MTS", "robustbase")
pacman::p_load("tidyverse", "devtools", "rugarch","rmgarch", "forecast", "tbl2xts", "lubridate", "PerformanceAnalytics", "Texevier", "ggthemes")
loaded_packages(htmltools)
loaded_packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
